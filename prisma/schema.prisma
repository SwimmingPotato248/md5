// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  password      String
  display_name  String
  role          Role
  exams         Exam[]
  exam_attempts ExamAttempt[]
  Question      Question[]
}

enum Role {
  User
  Admin
}

model Exam {
  id    String @id @default(cuid())
  title String

  user          User          @relation(fields: [user_id], references: [id])
  user_id       String
  exam_attempts ExamAttempt[]
  questions     Question[]
}

model Question {
  id      String @id @default(cuid())
  content String
  user    User   @relation(fields: [user_id], references: [id])
  exams   Exam[]

  category Category @relation(fields: [category_id], references: [id])

  answers        Answer[]
  attempt_detail AttemptDetail[]
  user_id        String
  category_id    String
}

model Answer {
  id          String   @id @default(cuid())
  content     String
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id String
  status      Boolean
}

model Category {
  id       String     @id @default(cuid())
  name     String
  question Question[]
}

model ExamAttempt {
  id   String @id @default(cuid())
  user User   @relation(fields: [user_id], references: [id])
  exam Exam   @relation(fields: [exam_id], references: [id])

  user_id        String
  exam_id        String
  attempt_detail AttemptDetail[]
}

model AttemptDetail {
  id          String      @id @default(cuid())
  attempt     ExamAttempt @relation(fields: [exam_attempt_id], references: [id])
  question    Question    @relation(fields: [question_id], references: [id])
  user_answer String
  status      Boolean

  exam_attempt_id String
  question_id     String
}
